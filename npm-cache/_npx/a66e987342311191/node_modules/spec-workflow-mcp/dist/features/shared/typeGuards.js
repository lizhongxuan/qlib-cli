/**
 * 类型守卫和类型验证工具
 */
/**
 * 检查值是否为对象（非 null）
 */
export function isObject(value) {
    return typeof value === 'object' && value !== null && !Array.isArray(value);
}
/**
 * 检查值是否为字符串
 */
export function isString(value) {
    return typeof value === 'string';
}
/**
 * 检查值是否为数字
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * 检查值是否为布尔值
 */
export function isBoolean(value) {
    return typeof value === 'boolean';
}
/**
 * 检查值是否为数组
 */
export function isArray(value) {
    return Array.isArray(value);
}
/**
 * 安全地获取对象属性
 */
export function getProperty(obj, key, validator) {
    if (!isObject(obj)) {
        return undefined;
    }
    const value = obj[key];
    if (validator) {
        return validator(value) ? value : undefined;
    }
    return value;
}
/**
 * 检查对象是否具有特定属性
 */
export function hasProperty(obj, key) {
    return isObject(obj) && key in obj;
}
/**
 * 验证对象具有必需的属性
 */
export function hasRequiredProperties(obj, properties) {
    if (!isObject(obj)) {
        return false;
    }
    return properties.every(prop => prop in obj);
}
/**
 * 类型断言辅助函数
 */
export function assertType(value, validator, errorMessage) {
    if (!validator(value)) {
        throw new TypeError(errorMessage);
    }
    return value;
}
/**
 * 安全的 JSON 解析
 */
export function safeJsonParse(json) {
    try {
        return JSON.parse(json);
    }
    catch {
        return undefined;
    }
}
/**
 * 将 unknown 类型转换为 Record<string, unknown>
 * 如果不是对象，返回空对象
 */
export function toRecord(value) {
    return isObject(value) ? value : {};
}
/**
 * 将 unknown 类型转换为数组
 * 如果不是数组，返回空数组
 */
export function toArray(value) {
    return isArray(value) ? value : [];
}
//# sourceMappingURL=typeGuards.js.map