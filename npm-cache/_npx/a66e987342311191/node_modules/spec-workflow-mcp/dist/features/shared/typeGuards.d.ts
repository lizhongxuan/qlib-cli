/**
 * 类型守卫和类型验证工具
 */
/**
 * 检查值是否为对象（非 null）
 */
export declare function isObject(value: unknown): value is Record<string, unknown>;
/**
 * 检查值是否为字符串
 */
export declare function isString(value: unknown): value is string;
/**
 * 检查值是否为数字
 */
export declare function isNumber(value: unknown): value is number;
/**
 * 检查值是否为布尔值
 */
export declare function isBoolean(value: unknown): value is boolean;
/**
 * 检查值是否为数组
 */
export declare function isArray(value: unknown): value is unknown[];
/**
 * 安全地获取对象属性
 */
export declare function getProperty<T>(obj: unknown, key: string, validator?: (value: unknown) => value is T): T | undefined;
/**
 * 检查对象是否具有特定属性
 */
export declare function hasProperty(obj: unknown, key: string): obj is Record<string, unknown>;
/**
 * 验证对象具有必需的属性
 */
export declare function hasRequiredProperties(obj: unknown, properties: string[]): obj is Record<string, unknown>;
/**
 * 类型断言辅助函数
 */
export declare function assertType<T>(value: unknown, validator: (value: unknown) => value is T, errorMessage: string): T;
/**
 * 安全的 JSON 解析
 */
export declare function safeJsonParse(json: string): unknown;
/**
 * 将 unknown 类型转换为 Record<string, unknown>
 * 如果不是对象，返回空对象
 */
export declare function toRecord(value: unknown): Record<string, unknown>;
/**
 * 将 unknown 类型转换为数组
 * 如果不是数组，返回空数组
 */
export declare function toArray(value: unknown): unknown[];
//# sourceMappingURL=typeGuards.d.ts.map