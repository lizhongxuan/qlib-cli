export interface OpenApiSpec {
    paths: {
        '/spec': {
            post: {
                responses: {
                    '200': {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    components: {
        schemas: Record<string, unknown>;
    };
    'x-error-responses': Record<string, {
        displayText: string;
    }>;
    'x-shared-resources': Record<string, {
        uri: string;
        title?: string;
        mimeType: string;
        text?: string;
    }>;
    'x-global-config': unknown;
    'x-document-templates': Record<string, unknown>;
    'x-task-guidance-template'?: {
        separator: string;
        header: string;
        instructions: {
            prefix: string;
            taskFocus: string;
            progressTracking: string;
            workflow: string;
        };
        prompts: {
            firstTask: string;
            nextTask: string;
            continueTask: string;
            batchContinue: string;
        };
        completionMessages: {
            taskCompleted: string;
            allCompleted: string;
            alreadyCompleted: string;
            batchSucceeded: string;
            batchCompleted: string;
        };
    };
}
export declare class OpenApiLoader {
    private static instance;
    private spec;
    private examples;
    private constructor();
    static getInstance(): OpenApiLoader;
    loadSpec(): OpenApiSpec;
    private cacheExamples;
    getResponseExample(responseType: string, criteria?: Record<string, unknown>): unknown;
    getErrorResponse(errorType: string): string | null;
    getProgressRules(): unknown;
    private getNestedValue;
    static replaceVariables(template: string, variables: Record<string, unknown>): string;
    getSharedResource(resourceId: string): {
        uri: string;
        title?: string;
        mimeType: string;
        text?: string;
    } | null;
    getGlobalConfig(): unknown;
    getDocumentTemplate(templateType: string): unknown;
    resolveResources(resources?: Array<unknown>): Array<{
        uri: string;
        title?: string;
        mimeType: string;
        text?: string;
    }> | undefined;
    getTaskGuidanceTemplate(): OpenApiSpec['x-task-guidance-template'] | null;
    getExamplesCount(responseType: string): number;
}
export declare const openApiLoader: OpenApiLoader;
//# sourceMappingURL=openApiLoader.d.ts.map