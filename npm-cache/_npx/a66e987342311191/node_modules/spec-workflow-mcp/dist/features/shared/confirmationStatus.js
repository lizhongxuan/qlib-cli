/**
 * Confirmation status management
 */
import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join } from 'path';
const CONFIRMATION_FILE = '.workflow-confirmations.json';
export function getWorkflowConfirmations(path) {
    const filePath = join(path, CONFIRMATION_FILE);
    const defaultStatus = {
        confirmed: {
            requirements: false,
            design: false,
            tasks: false
        },
        skipped: {
            requirements: false,
            design: false,
            tasks: false
        }
    };
    if (!existsSync(filePath)) {
        return defaultStatus;
    }
    try {
        const content = readFileSync(filePath, 'utf-8');
        const parsed = JSON.parse(content);
        // Compatible with old format
        if (!parsed.confirmed && !parsed.skipped) {
            return {
                confirmed: parsed,
                skipped: {
                    requirements: false,
                    design: false,
                    tasks: false
                }
            };
        }
        return parsed;
    }
    catch {
        return defaultStatus;
    }
}
// Keep old function for compatibility with existing code
export function getConfirmationStatus(path) {
    const confirmations = getWorkflowConfirmations(path);
    return confirmations.confirmed;
}
export function updateStageConfirmation(path, stage, confirmed) {
    const confirmations = getWorkflowConfirmations(path);
    confirmations.confirmed[stage] = confirmed;
    const filePath = join(path, CONFIRMATION_FILE);
    writeFileSync(filePath, JSON.stringify(confirmations, null, 2));
}
export function updateStageSkipped(path, stage, skipped) {
    const confirmations = getWorkflowConfirmations(path);
    confirmations.skipped[stage] = skipped;
    const filePath = join(path, CONFIRMATION_FILE);
    writeFileSync(filePath, JSON.stringify(confirmations, null, 2));
}
export function isStageConfirmed(path, stage) {
    const confirmations = getWorkflowConfirmations(path);
    return confirmations.confirmed[stage];
}
export function isStageSkipped(path, stage) {
    const confirmations = getWorkflowConfirmations(path);
    return confirmations.skipped[stage];
}
//# sourceMappingURL=confirmationStatus.js.map