// Â∏ÉÂ±ÄÁªÑ‰ª∂
const { useState, useEffect, useCallback } = React;

const Layout = ({ children, currentPage, onNavigate }) => {
    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
    const [notifications, setNotifications] = useState([
        { id: 1, type: 'success', message: 'Ê®°ÂûãËÆ≠ÁªÉÂÆåÊàê', time: '2ÂàÜÈíüÂâç' },
        { id: 2, type: 'info', message: 'Êï∞ÊçÆÈõÜÊõ¥Êñ∞', time: '15ÂàÜÈíüÂâç' }
    ]);
    const [showNotifications, setShowNotifications] = useState(false);

    const menuItems = [
        { key: 'dashboard', label: 'ÊÄªËßà', icon: 'üè†', desc: 'Á≥ªÁªüÊ¶ÇËßàÂíåÂø´ÈÄüÊìç‰Ωú' },
        { key: 'data', label: 'Êï∞ÊçÆÁÆ°ÁêÜ', icon: 'üíæ', desc: 'QlibÊï∞ÊçÆÈõÜÂíåÊï∞ÊçÆÊ∫êÁÆ°ÁêÜ' },
        { key: 'factor', label: 'Âõ†Â≠êÁ†îÁ©∂', icon: 'üßÆ', desc: 'Âõ†Â≠êÂºÄÂèë„ÄÅÁºñËæëÂíåÂàÜÊûê' },
        { key: 'workflow', label: 'qlibÈáèÂåñÁ†îÁ©∂Â∑•‰ΩúÊµÅ', icon: '‚öôÔ∏è', desc: 'Âü∫‰∫éqlibÁöÑÁ´ØÂà∞Á´ØÈáèÂåñÊäïËµÑÁ†îÁ©∂ÊµÅÁ®ã' },
        { key: 'results', label: 'ÁªìÊûúÂàÜÊûê', icon: 'üìä', desc: 'Ê®°ÂûãÂíåÁ≠ñÁï•ÂàÜÊûêÊä•Âëä' },
    ];

    const systemStatus = {
        cpu: 65,
        memory: 78,
        disk: 45,
        network: 'online'
    };

    const clearNotification = (id) => {
        setNotifications(prev => prev.filter(n => n.id !== id));
    };

    return (
        <div className="layout">
            {/* È°∂ÈÉ®ÂØºËà™Ê†è */}
            <header className="header">
                <div className="header-left">
                    <button 
                        className="sidebar-toggle"
                        onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                    >
                        ‚ò∞
                    </button>
                    <div className="logo">
                        <span className="logo-icon">üìä</span>
                        <span className="logo-text">QlibÈáèÂåñÂπ≥Âè∞</span>
                    </div>
                </div>
                
                <div className="header-center">
                    <div className="breadcrumb">
                        <span className="breadcrumb-item">
                            {menuItems.find(item => item.key === currentPage)?.icon} {' '}
                            {menuItems.find(item => item.key === currentPage)?.label}
                        </span>
                    </div>
                </div>
                
                <div className="header-right">
                    <div className="system-indicators">
                        <div className="indicator">
                            <span className="indicator-label">CPU</span>
                            <div className="indicator-bar">
                                <div className="indicator-fill" style={{width: `${systemStatus.cpu}%`}}></div>
                            </div>
                            <span className="indicator-value">{systemStatus.cpu}%</span>
                        </div>
                        <div className="indicator">
                            <span className="indicator-label">ÂÜÖÂ≠ò</span>
                            <div className="indicator-bar">
                                <div className="indicator-fill" style={{width: `${systemStatus.memory}%`}}></div>
                            </div>
                            <span className="indicator-value">{systemStatus.memory}%</span>
                        </div>
                    </div>
                    
                    <div className="header-actions">
                        <div className="notification-bell" onClick={() => setShowNotifications(!showNotifications)}>
                            üîî
                            {notifications.length > 0 && (
                                <span className="notification-badge">{notifications.length}</span>
                            )}
                        </div>
                        <div className="user-menu">
                            <div className="user-avatar">üë§</div>
                            <div className="user-name">ÁÆ°ÁêÜÂëò</div>
                        </div>
                    </div>
                </div>
            </header>

            <div className="layout-body">
                {/* ‰æßËæπÊ†è */}
                <aside className={`sidebar ${sidebarCollapsed ? 'collapsed' : ''}`}>
                    <nav className="sidebar-nav">
                        {menuItems.map(item => (
                            <div
                                key={item.key}
                                className={`nav-item ${currentPage === item.key ? 'active' : ''}`}
                                onClick={() => onNavigate(item.key)}
                                title={sidebarCollapsed ? `${item.label} - ${item.desc}` : ''}
                            >
                                <span className="nav-icon">{item.icon}</span>
                                {!sidebarCollapsed && (
                                    <div className="nav-content">
                                        <span className="nav-label">{item.label}</span>
                                        <span className="nav-desc">{item.desc}</span>
                                    </div>
                                )}
                            </div>
                        ))}
                    </nav>
                    
                    {!sidebarCollapsed && (
                        <div className="sidebar-footer">
                            <div className="system-info">
                                <h3>Á≥ªÁªü‰ø°ÊÅØ</h3>
                                <div className="info-item">
                                    <span>Áä∂ÊÄÅ:</span>
                                    <span className="status-online">Ê≠£Â∏∏ËøêË°å</span>
                                </div>
                                <div className="info-item">
                                    <span>ÁâàÊú¨:</span>
                                    <span>v1.0.0</span>
                                </div>
                                <div className="info-item">
                                    <span>ËøêË°åÊó∂Èó¥:</span>
                                    <span>2Â§©3Â∞èÊó∂</span>
                                </div>
                            </div>
                        </div>
                    )}
                </aside>

                {/* ‰∏ªÂÜÖÂÆπÂå∫ */}
                <main className="main-content">
                    {children}
                </main>
            </div>

            {/* Áä∂ÊÄÅÊ†è */}
            <footer className="status-bar">
                <div className="status-left">
                    <span className="status-item">
                        üü¢ Á≥ªÁªüÊ≠£Â∏∏
                    </span>
                    <span className="status-item">
                        üìä ÂÆûÊó∂Êï∞ÊçÆÂ∑≤ËøûÊé•
                    </span>
                    <span className="status-item">
                        ‚è∞ {new Date().toLocaleString()}
                    </span>
                </div>
                <div className="status-right">
                    <span className="status-item">
                        Á£ÅÁõò: {systemStatus.disk}%
                    </span>
                    <span className="status-item">
                        ÁΩëÁªú: {systemStatus.network === 'online' ? 'üü¢ Âú®Á∫ø' : 'üî¥ Á¶ªÁ∫ø'}
                    </span>
                </div>
            </footer>

            {/* ÈÄöÁü•Èù¢Êùø */}
            {showNotifications && (
                <div className="notification-panel">
                    <div className="notification-header">
                        <h3>ÈÄöÁü•</h3>
                        <button onClick={() => setShowNotifications(false)}>√ó</button>
                    </div>
                    <div className="notification-list">
                        {notifications.length === 0 ? (
                            <div className="no-notifications">ÊöÇÊó†ÈÄöÁü•</div>
                        ) : (
                            notifications.map(notification => (
                                <div key={notification.id} className={`notification-item ${notification.type}`}>
                                    <div className="notification-content">
                                        <div className="notification-message">{notification.message}</div>
                                        <div className="notification-time">{notification.time}</div>
                                    </div>
                                    <button 
                                        className="notification-close"
                                        onClick={() => clearNotification(notification.id)}
                                    >
                                        √ó
                                    </button>
                                </div>
                            ))
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};