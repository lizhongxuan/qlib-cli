version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: qlib-mysql
    environment:
      MYSQL_ROOT_PASSWORD: qlib123456
      MYSQL_DATABASE: qlib
      MYSQL_USER: qlib
      MYSQL_PASSWORD: qlib123456
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - qlib-network
    restart: unless-stopped

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: qlib-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qlib-network
    restart: unless-stopped

  # Qlib后端服务
  qlib-backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: qlib-backend
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=qlib
      - DB_PASSWORD=qlib123456
      - DB_DATABASE=qlib
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GIN_MODE=release
      - APP_PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./output:/app/output
      - ./qlib_data:/root/.qlib/qlib_data
    depends_on:
      - mysql
      - redis
    networks:
      - qlib-network
    restart: unless-stopped

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: qlib-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - qlib-backend
    networks:
      - qlib-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:

networks:
  qlib-network:
    driver: bridge